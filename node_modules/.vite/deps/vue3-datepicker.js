import {
  addMonths,
  addYears,
  eachDayOfInterval,
  eachMonthOfInterval,
  eachYearOfInterval,
  endOfDay,
  endOfDecade,
  endOfMonth,
  endOfWeek,
  endOfYear,
  format,
  getDecade,
  getYear,
  isAfter,
  isBefore,
  isSameDay,
  isSameHour,
  isSameMinute,
  isSameMonth,
  isSameYear,
  isValid,
  isWithinInterval,
  max,
  min,
  parse,
  set,
  setDay,
  startOfDay,
  startOfDecade,
  startOfMonth,
  startOfWeek,
  startOfYear,
  subMonths,
  subYears
} from "./chunk-ENCXXG3N.js";
import {
  Fragment,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createTextVNode,
  createVNode,
  defineComponent,
  mergeProps,
  nextTick,
  openBlock,
  popScopeId,
  pushScopeId,
  ref,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  vModelText,
  vShow,
  watch,
  watchEffect,
  withCtx,
  withDirectives,
  withModifiers
} from "./chunk-KGG2AQEQ.js";
import {
  normalizeClass,
  normalizeStyle,
  toDisplayString
} from "./chunk-COVBBPM4.js";

// node_modules/vue3-datepicker/dist/vue3-datepicker.mjs
(function() {
  "use strict";
  try {
    if (typeof document < "u") {
      var e = document.createElement("style");
      e.appendChild(document.createTextNode(".v3dp__popout[data-v-65eb861b]{z-index:10;position:absolute;text-align:center;width:17.5em;background-color:var(--popout-bg-color);box-shadow:var(--box-shadow);border-radius:var(--border-radius);padding:8px 0 1em;color:var(--text-color)}.v3dp__popout *[data-v-65eb861b]{color:inherit;font-size:inherit;font-weight:inherit}.v3dp__popout[data-v-65eb861b] button{background:none;border:none;outline:none}.v3dp__popout[data-v-65eb861b] button:not(:disabled){cursor:pointer}.v3dp__heading[data-v-65eb861b]{width:100%;display:flex;height:var(--heading-size);line-height:var(--heading-size);font-weight:var(--heading-weight)}.v3dp__heading__button[data-v-65eb861b]{background:none;border:none;padding:0;display:flex;justify-content:center;align-items:center;width:var(--heading-size)}button.v3dp__heading__center[data-v-65eb861b]:hover,.v3dp__heading__button[data-v-65eb861b]:not(:disabled):hover{background-color:var(--heading-hover-color)}.v3dp__heading__center[data-v-65eb861b]{flex:1}.v3dp__heading__icon[data-v-65eb861b]{height:12px;stroke:var(--arrow-color)}.v3dp__heading__button:disabled .v3dp__heading__icon[data-v-65eb861b]{stroke:var(--elem-disabled-color)}.v3dp__subheading[data-v-65eb861b],.v3dp__elements[data-v-65eb861b]{display:grid;grid-template-columns:var(--popout-column-definition);font-size:var(--elem-font-size)}.v3dp__subheading[data-v-65eb861b]{margin-top:1em}.v3dp__divider[data-v-65eb861b]{border:1px solid var(--divider-color);border-radius:3px}.v3dp__elements[data-v-65eb861b] button:disabled{color:var(--elem-disabled-color)}.v3dp__elements[data-v-65eb861b] button{padding:.3em .6em}.v3dp__elements[data-v-65eb861b] button span{display:block;line-height:1.9em;height:1.8em;border-radius:var(--elem-border-radius)}.v3dp__elements[data-v-65eb861b] button:not(:disabled):hover span{background-color:var(--elem-hover-bg-color);color:var(--elem-hover-color)}.v3dp__elements[data-v-65eb861b] button.selected span{background-color:var(--elem-selected-bg-color);color:var(--elem-selected-color)}.v3dp__elements[data-v-65eb861b] button.current span{font-weight:var(--elem-current-font-weight);outline:1px solid var(--elem-current-outline-color)}.v3dp__column[data-v-81ac698d]{display:flex;flex-direction:column;overflow-y:auto;height:190px}.v3dp__datepicker{--popout-bg-color: var(--vdp-bg-color, #fff);--box-shadow: var( --vdp-box-shadow, 0 4px 10px 0 rgba(128, 144, 160, .1), 0 0 1px 0 rgba(128, 144, 160, .81) );--text-color: var(--vdp-text-color, #000000);--border-radius: var(--vdp-border-radius, 3px);--heading-size: var(--vdp-heading-size, 2.5em);--heading-weight: var(--vdp-heading-weight, bold);--heading-hover-color: var(--vdp-heading-hover-color, #eeeeee);--arrow-color: var(--vdp-arrow-color, currentColor);--elem-color: var(--vdp-elem-color, currentColor);--elem-disabled-color: var(--vdp-disabled-color, #d5d9e0);--elem-hover-color: var(--vdp-hover-color, #fff);--elem-hover-bg-color: var(--vdp-hover-bg-color, #0baf74);--elem-selected-color: var(--vdp-selected-color, #fff);--elem-selected-bg-color: var(--vdp-selected-bg-color, #0baf74);--elem-current-outline-color: var(--vdp-current-date-outline-color, #888);--elem-current-font-weight: var(--vdp-current-date-font-weight, bold);--elem-font-size: var(--vdp-elem-font-size, .8em);--elem-border-radius: var(--vdp-elem-border-radius, 3px);--divider-color: var(--vdp-divider-color, var(--elem-disabled-color));position:relative}.v3dp__clearable{display:inline;position:relative;left:-15px;cursor:pointer}")), document.head.appendChild(e);
    }
  } catch (o) {
    console.error("vite-plugin-css-injected-by-js", o);
  }
})();
var je = ["year", "month", "day", "time", "custom"];
var Ye = defineComponent({
  emits: {
    elementClick: (e) => isValid(e),
    left: () => true,
    right: () => true,
    heading: () => true
  },
  props: {
    headingClickable: {
      type: Boolean,
      default: false
    },
    leftDisabled: {
      type: Boolean,
      default: false
    },
    rightDisabled: {
      type: Boolean,
      default: false
    },
    columnCount: {
      type: Number,
      default: 7
    },
    items: {
      type: Array,
      default: () => []
    },
    viewMode: {
      type: String,
      required: true,
      validate: (e) => typeof e == "string" && je.includes(e)
    }
  }
});
var T = (e, t) => {
  const r = e.__vccOpts || e;
  for (const [l, o] of t)
    r[l] = o;
  return r;
};
var te = (e) => (pushScopeId("data-v-65eb861b"), e = e(), popScopeId(), e);
var Ne = { class: "v3dp__heading" };
var Ae = ["disabled"];
var Ue = te(() => createBaseVNode("svg", {
  class: "v3dp__heading__icon",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 6 8"
}, [
  createBaseVNode("g", {
    fill: "none",
    "fill-rule": "evenodd"
  }, [
    createBaseVNode("path", {
      stroke: "none",
      d: "M-9 16V-8h24v24z"
    }),
    createBaseVNode("path", {
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      d: "M5 0L1 4l4 4"
    })
  ])
], -1));
var We = ["disabled"];
var Ze = te(() => createBaseVNode("svg", {
  class: "v3dp__heading__icon",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 6 8"
}, [
  createBaseVNode("g", {
    fill: "none",
    "fill-rule": "evenodd"
  }, [
    createBaseVNode("path", {
      stroke: "none",
      d: "M15-8v24H-9V-8z"
    }),
    createBaseVNode("path", {
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      d: "M1 8l4-4-4-4"
    })
  ])
], -1));
var ze = { class: "v3dp__body" };
var Ke = { class: "v3dp__subheading" };
var Ge = te(() => createBaseVNode("hr", { class: "v3dp__divider" }, null, -1));
var Je = { class: "v3dp__elements" };
var Qe = ["disabled", "onClick"];
function Xe(e, t, r, l, o, p) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["v3dp__popout", `v3dp__popout-${e.viewMode}`]),
    style: normalizeStyle({ ["--popout-column-definition"]: `repeat(${e.columnCount}, 1fr)` }),
    onMousedown: t[3] || (t[3] = withModifiers(() => {
    }, ["prevent"]))
  }, [
    createBaseVNode("div", Ne, [
      createBaseVNode("button", {
        class: "v3dp__heading__button v3dp__heading__button__left",
        disabled: e.leftDisabled,
        onClick: t[0] || (t[0] = withModifiers((n) => e.$emit("left"), ["stop", "prevent"]))
      }, [
        renderSlot(e.$slots, "arrow-left", {}, () => [
          Ue
        ], true)
      ], 8, Ae),
      (openBlock(), createBlock(resolveDynamicComponent(e.headingClickable ? "button" : "span"), {
        class: "v3dp__heading__center",
        onClick: t[1] || (t[1] = withModifiers((n) => e.$emit("heading"), ["stop", "prevent"]))
      }, {
        default: withCtx(() => [
          renderSlot(e.$slots, "heading", {}, void 0, true)
        ]),
        _: 3
      })),
      createBaseVNode("button", {
        class: "v3dp__heading__button v3dp__heading__button__right",
        disabled: e.rightDisabled,
        onClick: t[2] || (t[2] = withModifiers((n) => e.$emit("right"), ["stop", "prevent"]))
      }, [
        renderSlot(e.$slots, "arrow-right", {}, () => [
          Ze
        ], true)
      ], 8, We)
    ]),
    createBaseVNode("div", ze, [
      "subheading" in e.$slots ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        createBaseVNode("div", Ke, [
          renderSlot(e.$slots, "subheading", {}, void 0, true)
        ]),
        Ge
      ], 64)) : createCommentVNode("", true),
      createBaseVNode("div", Je, [
        renderSlot(e.$slots, "body", {}, () => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(e.items, (n) => (openBlock(), createElementBlock("button", {
            key: n.key,
            disabled: n.disabled,
            class: normalizeClass([
              {
                selected: n.selected,
                current: n.current
              },
              `v3dp__element__button__${e.viewMode}`
            ]),
            onClick: withModifiers((a) => e.$emit("elementClick", n.value), ["stop", "prevent"])
          }, [
            createBaseVNode("span", null, toDisplayString(n.display), 1)
          ], 10, Qe))), 128))
        ], true)
      ])
    ])
  ], 38);
}
var G = T(Ye, [["render", Xe], ["__scopeId", "data-v-65eb861b"]]);
var xe = defineComponent({
  components: {
    PickerPopup: G
  },
  emits: {
    "update:pageDate": (e) => isValid(e),
    select: (e) => isValid(e)
  },
  props: {
    selected: {
      type: Date,
      required: false
    },
    pageDate: {
      type: Date,
      required: true
    },
    lowerLimit: {
      type: Date,
      required: false
    },
    upperLimit: {
      type: Date,
      required: false
    }
  },
  setup(e, { emit: t }) {
    const r = computed(() => startOfDecade(e.pageDate)), l = computed(() => endOfDecade(e.pageDate)), o = (b, y, i) => !y && !i ? true : !(y && getYear(b) < getYear(y) || i && getYear(b) > getYear(i)), p = computed(
      () => eachYearOfInterval({
        start: r.value,
        end: l.value
      }).map(
        (b) => ({
          value: b,
          key: String(getYear(b)),
          display: getYear(b),
          selected: !!e.selected && getYear(b) === getYear(e.selected),
          disabled: !o(b, e.lowerLimit, e.upperLimit)
        })
      )
    ), n = computed(() => {
      const b = getYear(r.value), y = getYear(l.value);
      return `${b} - ${y}`;
    }), a = computed(
      () => e.lowerLimit && (getDecade(e.lowerLimit) === getDecade(e.pageDate) || isBefore(e.pageDate, e.lowerLimit))
    ), f = computed(
      () => e.upperLimit && (getDecade(e.upperLimit) === getDecade(e.pageDate) || isAfter(e.pageDate, e.upperLimit))
    );
    return {
      years: p,
      heading: n,
      leftDisabled: a,
      rightDisabled: f,
      previousPage: () => t("update:pageDate", subYears(e.pageDate, 10)),
      nextPage: () => t("update:pageDate", addYears(e.pageDate, 10))
    };
  }
});
function et(e, t, r, l, o, p) {
  const n = resolveComponent("picker-popup");
  return openBlock(), createBlock(n, {
    columnCount: 3,
    leftDisabled: e.leftDisabled,
    rightDisabled: e.rightDisabled,
    items: e.years,
    viewMode: "year",
    onLeft: e.previousPage,
    onRight: e.nextPage,
    onElementClick: t[0] || (t[0] = (a) => e.$emit("select", a))
  }, {
    heading: withCtx(() => [
      createTextVNode(toDisplayString(e.heading), 1)
    ]),
    _: 1
  }, 8, ["leftDisabled", "rightDisabled", "items", "onLeft", "onRight"]);
}
var tt = T(xe, [["render", et]]);
var at = defineComponent({
  components: {
    PickerPopup: G
  },
  emits: {
    "update:pageDate": (e) => isValid(e),
    select: (e) => isValid(e),
    back: () => true
  },
  props: {
    /**
     * Currently selected date, needed for highlighting
     */
    selected: {
      type: Date,
      required: false
    },
    pageDate: {
      type: Date,
      required: true
    },
    format: {
      type: String,
      required: false,
      default: "LLL"
    },
    locale: {
      type: Object,
      required: false
    },
    lowerLimit: {
      type: Date,
      required: false
    },
    upperLimit: {
      type: Date,
      required: false
    }
  },
  setup(e, { emit: t }) {
    const r = computed(() => startOfYear(e.pageDate)), l = computed(() => endOfYear(e.pageDate)), o = computed(
      () => (y) => format(y, e.format, {
        locale: e.locale
      })
    ), p = (y, i, D) => !i && !D ? true : !(i && isBefore(y, startOfMonth(i)) || D && isAfter(y, endOfMonth(D))), n = computed(
      () => eachMonthOfInterval({
        start: r.value,
        end: l.value
      }).map(
        (y) => ({
          value: y,
          display: o.value(y),
          key: o.value(y),
          selected: !!e.selected && isSameMonth(e.selected, y),
          disabled: !p(y, e.lowerLimit, e.upperLimit)
        })
      )
    ), a = computed(() => getYear(r.value)), f = computed(
      () => e.lowerLimit && (isSameYear(e.lowerLimit, e.pageDate) || isBefore(e.pageDate, e.lowerLimit))
    ), _ = computed(
      () => e.upperLimit && (isSameYear(e.upperLimit, e.pageDate) || isAfter(e.pageDate, e.upperLimit))
    );
    return {
      months: n,
      heading: a,
      leftDisabled: f,
      rightDisabled: _,
      previousPage: () => t("update:pageDate", subYears(e.pageDate, 1)),
      nextPage: () => t("update:pageDate", addYears(e.pageDate, 1))
    };
  }
});
function nt(e, t, r, l, o, p) {
  const n = resolveComponent("picker-popup");
  return openBlock(), createBlock(n, {
    headingClickable: "",
    columnCount: 3,
    items: e.months,
    leftDisabled: e.leftDisabled,
    rightDisabled: e.rightDisabled,
    viewMode: "month",
    onLeft: e.previousPage,
    onRight: e.nextPage,
    onHeading: t[0] || (t[0] = (a) => e.$emit("back")),
    onElementClick: t[1] || (t[1] = (a) => e.$emit("select", a))
  }, {
    heading: withCtx(() => [
      createTextVNode(toDisplayString(e.heading), 1)
    ]),
    _: 1
  }, 8, ["items", "leftDisabled", "rightDisabled", "onLeft", "onRight"]);
}
var it = T(at, [["render", nt]]);
var lt = defineComponent({
  components: {
    PickerPopup: G
  },
  emits: {
    "update:pageDate": (e) => isValid(e),
    select: (e) => isValid(e),
    back: () => true
  },
  props: {
    selected: {
      type: Date,
      required: false
    },
    pageDate: {
      type: Date,
      required: true
    },
    format: {
      type: String,
      required: false,
      default: "dd"
    },
    headingFormat: {
      type: String,
      required: false,
      default: "LLLL yyyy"
    },
    weekdayFormat: {
      type: String,
      required: false,
      default: "EE"
    },
    locale: {
      type: Object,
      required: false
    },
    weekStartsOn: {
      type: Number,
      required: false,
      default: 1,
      validator: (e) => typeof e == "number" && Number.isInteger(e) && e >= 0 && e <= 6
    },
    lowerLimit: {
      type: Date,
      required: false
    },
    upperLimit: {
      type: Date,
      required: false
    },
    disabledDates: {
      type: Object,
      required: false
    },
    allowOutsideInterval: {
      type: Boolean,
      required: false,
      default: false
    }
  },
  setup(e, { emit: t }) {
    const r = computed(
      () => (g) => (v) => format(v, g, {
        locale: e.locale,
        weekStartsOn: e.weekStartsOn
      })
    ), l = computed(() => startOfMonth(e.pageDate)), o = computed(() => endOfMonth(e.pageDate)), p = computed(() => ({
      start: l.value,
      end: o.value
    })), n = computed(() => ({
      start: startOfWeek(l.value, {
        weekStartsOn: e.weekStartsOn
      }),
      end: endOfWeek(o.value, {
        weekStartsOn: e.weekStartsOn
      })
    })), a = computed(() => {
      const g = e.weekStartsOn, v = r.value(e.weekdayFormat);
      return Array.from(Array(7)).map((c, k) => (g + k) % 7).map(
        (c) => setDay(/* @__PURE__ */ new Date(), c, {
          weekStartsOn: e.weekStartsOn
        })
      ).map(v);
    }), f = (g, v, c, k) => {
      var E, J;
      return (E = k == null ? void 0 : k.dates) != null && E.some((ae) => isSameDay(g, ae)) || (J = k == null ? void 0 : k.predicate) != null && J.call(k, g) ? false : !v && !c ? true : !(v && isBefore(g, startOfDay(v)) || c && isAfter(g, endOfDay(c)));
    }, _ = computed(() => {
      const g = /* @__PURE__ */ new Date(), v = r.value(e.format);
      return eachDayOfInterval(n.value).map(
        (c) => ({
          value: c,
          display: v(c),
          selected: !!e.selected && isSameDay(e.selected, c),
          current: isSameDay(g, c),
          disabled: !e.allowOutsideInterval && !isWithinInterval(c, p.value) || !f(
            c,
            e.lowerLimit,
            e.upperLimit,
            e.disabledDates
          ),
          key: r.value("yyyy-MM-dd")(c)
        })
      );
    }), d = computed(
      () => r.value(e.headingFormat)(e.pageDate)
    ), b = computed(
      () => e.lowerLimit && (isSameMonth(e.lowerLimit, e.pageDate) || isBefore(e.pageDate, e.lowerLimit))
    ), y = computed(
      () => e.upperLimit && (isSameMonth(e.upperLimit, e.pageDate) || isAfter(e.pageDate, e.upperLimit))
    );
    return {
      weekDays: a,
      days: _,
      heading: d,
      leftDisabled: b,
      rightDisabled: y,
      previousPage: () => t("update:pageDate", subMonths(e.pageDate, 1)),
      nextPage: () => t("update:pageDate", addMonths(e.pageDate, 1))
    };
  }
});
function ot(e, t, r, l, o, p) {
  const n = resolveComponent("picker-popup");
  return openBlock(), createBlock(n, {
    headingClickable: "",
    leftDisabled: e.leftDisabled,
    rightDisabled: e.rightDisabled,
    items: e.days,
    viewMode: "day",
    onLeft: e.previousPage,
    onRight: e.nextPage,
    onHeading: t[0] || (t[0] = (a) => e.$emit("back")),
    onElementClick: t[1] || (t[1] = (a) => e.$emit("select", a))
  }, {
    heading: withCtx(() => [
      createTextVNode(toDisplayString(e.heading), 1)
    ]),
    subheading: withCtx(() => [
      (openBlock(true), createElementBlock(Fragment, null, renderList(e.weekDays, (a, f) => (openBlock(), createElementBlock("span", {
        key: a,
        class: normalizeClass(`v3dp__subheading__weekday__${f}`)
      }, toDisplayString(a), 3))), 128))
    ]),
    _: 1
  }, 8, ["leftDisabled", "rightDisabled", "items", "onLeft", "onRight"]);
}
var st = T(lt, [["render", ot]]);
function se(e, t) {
  const r = e.getBoundingClientRect(), l = {
    height: e.clientHeight,
    width: e.clientWidth
  }, o = t.getBoundingClientRect();
  if (!(o.top >= r.top && o.bottom <= r.top + l.height)) {
    const n = o.top - r.top, a = o.bottom - r.bottom;
    Math.abs(n) < Math.abs(a) ? e.scrollTop += n : e.scrollTop += a;
  }
}
var rt = defineComponent({
  components: {
    PickerPopup: G
  },
  emits: {
    select: (e) => isValid(e),
    back: () => true
  },
  props: {
    selected: {
      type: Date,
      required: false
    },
    pageDate: {
      type: Date,
      required: true
    },
    visible: {
      type: Boolean,
      required: true
    },
    disabledTime: {
      type: Object,
      required: false
    }
  },
  setup(e, { emit: t }) {
    const r = ref(null), l = ref(null), o = computed(() => e.pageDate ?? e.selected), p = ref(o.value.getHours()), n = ref(o.value.getMinutes());
    watch(
      () => e.selected,
      (i) => {
        let D = 0, g = 0;
        i && (D = i.getHours(), g = i.getMinutes()), p.value = D, n.value = g;
      }
    );
    const a = computed(
      () => [...Array(24).keys()].map(
        (i) => ({
          value: i,
          date: set(new Date(o.value.getTime()), {
            hours: i,
            minutes: n.value,
            seconds: 0
          }),
          selected: p.value === i,
          ref: ref(null)
        })
      )
    ), f = computed(
      () => [...Array(60).keys()].map((i) => ({
        value: i,
        date: set(new Date(o.value.getTime()), {
          hours: p.value,
          minutes: i,
          seconds: 0
        }),
        selected: n.value === i,
        ref: ref(null)
      }))
    ), _ = (i) => {
      n.value = i.value, t("select", i.date);
    }, d = () => {
      const i = a.value.find(
        (g) => {
          var v, c;
          return ((c = (v = g.ref.value) == null ? void 0 : v.classList) == null ? void 0 : c.contains("selected")) ?? false;
        }
      ), D = f.value.find(
        (g) => {
          var v, c;
          return ((c = (v = g.ref.value) == null ? void 0 : v.classList) == null ? void 0 : c.contains("selected")) ?? false;
        }
      );
      i && D && (se(r.value, i.ref.value), se(l.value, D.ref.value));
    };
    return watch(
      () => e.visible,
      (i) => {
        i && nextTick(d);
      }
    ), {
      hoursListRef: r,
      minutesListRef: l,
      hours: p,
      minutes: n,
      hoursList: a,
      minutesList: f,
      padStartZero: (i) => `0${i}`.substr(-2),
      selectMinutes: _,
      isEnabled: (i) => {
        var D, g, v, c;
        return !((g = (D = e.disabledTime) == null ? void 0 : D.dates) != null && g.some(
          (k) => isSameHour(i, k) && isSameMinute(i, k)
        ) || (c = (v = e.disabledTime) == null ? void 0 : v.predicate) != null && c.call(v, i));
      },
      scroll: d
    };
  }
});
var dt = {
  ref: "hoursListRef",
  class: "v3dp__column"
};
var ut = ["disabled", "onClick"];
var ct = {
  ref: "minutesListRef",
  class: "v3dp__column"
};
var mt = ["disabled", "onClick"];
function ft(e, t, r, l, o, p) {
  const n = resolveComponent("picker-popup");
  return openBlock(), createBlock(n, {
    headingClickable: "",
    columnCount: 2,
    leftDisabled: true,
    rightDisabled: true,
    viewMode: "time",
    onHeading: t[0] || (t[0] = (a) => e.$emit("back"))
  }, {
    heading: withCtx(() => [
      createTextVNode(toDisplayString(e.padStartZero(e.hours)) + ":" + toDisplayString(e.padStartZero(e.minutes)), 1)
    ]),
    body: withCtx(() => [
      createBaseVNode("div", dt, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(e.hoursList, (a) => (openBlock(), createElementBlock("button", {
          key: a.value,
          ref_for: true,
          ref: a.ref,
          class: normalizeClass([{ selected: a.selected }, "v3dp__element_button__hour"]),
          disabled: !e.isEnabled(a.date),
          onClick: withModifiers((f) => e.hours = a.value, ["stop", "prevent"])
        }, [
          createBaseVNode("span", null, toDisplayString(e.padStartZero(a.value)), 1)
        ], 10, ut))), 128))
      ], 512),
      createBaseVNode("div", ct, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(e.minutesList, (a) => (openBlock(), createElementBlock("button", {
          key: a.value,
          ref_for: true,
          ref: a.ref,
          class: normalizeClass([{ selected: a.selected }, "v3dp__element_button__minute"]),
          disabled: !e.isEnabled(a.date),
          onClick: withModifiers((f) => e.selectMinutes(a), ["stop", "prevent"])
        }, [
          createBaseVNode("span", null, toDisplayString(e.padStartZero(a.value)), 1)
        ], 10, mt))), 128))
      ], 512)
    ]),
    _: 1
  });
}
var pt = T(rt, [["render", ft], ["__scopeId", "data-v-81ac698d"]]);
var W = ["time", "day", "month", "year"];
var gt = (e, t, r = void 0) => {
  let l = r || /* @__PURE__ */ new Date();
  return e && (l = max([e, l])), t && (l = min([t, l])), l;
};
var vt = defineComponent({
  components: {
    YearPicker: tt,
    MonthPicker: it,
    DayPicker: st,
    TimePicker: pt
  },
  inheritAttrs: false,
  props: {
    placeholder: {
      type: String,
      default: ""
    },
    /**
     * `v-model` for selected date
     */
    modelValue: {
      type: Date,
      required: false
    },
    /**
     * Dates not available for picking
     */
    disabledDates: {
      type: Object,
      required: false
    },
    allowOutsideInterval: {
      type: Boolean,
      required: false,
      default: false
    },
    /**
     * Time not available for picking
     */
    disabledTime: {
      type: Object,
      required: false
    },
    /**
     * Upper limit for available dates for picking
     */
    upperLimit: {
      type: Date,
      required: false
    },
    /**
     * Lower limit for available dates for picking
     */
    lowerLimit: {
      type: Date,
      required: false
    },
    /**
     * View on which the date picker should open. Can be either `year`, `month`, `day` or `time`
     */
    startingView: {
      type: String,
      required: false,
      default: "day",
      validate: (e) => typeof e == "string" && W.includes(e)
    },
    /**
     * Date which should be the "center" of the initial view.
     * When an empty datepicker opens, it focuses on the month/year
     * that contains this date
     */
    startingViewDate: {
      type: Date,
      required: false,
      default: () => /* @__PURE__ */ new Date()
    },
    /**
     * `date-fns`-type formatting for a month view heading
     */
    dayPickerHeadingFormat: {
      type: String,
      required: false,
      default: "LLLL yyyy"
    },
    /**
     * `date-fns`-type formatting for the month picker view
     */
    monthListFormat: {
      type: String,
      required: false,
      default: "LLL"
    },
    /**
     * `date-fns`-type formatting for a line of weekdays on day view
     */
    weekdayFormat: {
      type: String,
      required: false,
      default: "EE"
    },
    /**
     * `date-fns`-type formatting for the day picker view
     */
    dayFormat: {
      type: String,
      required: false,
      default: "dd"
    },
    /**
     * `date-fns`-type format in which the string in the input should be both
     * parsed and displayed
     */
    inputFormat: {
      type: String,
      required: false,
      default: "yyyy-MM-dd"
    },
    /**
     * [`date-fns` locale object](https://date-fns.org/v2.16.1/docs/I18n#usage).
     * Used in string formatting (see default `dayPickerHeadingFormat`)
     */
    locale: {
      type: Object,
      required: false
    },
    /**
     * Day on which the week should start.
     *
     * Number from 0 to 6, where 0 is Sunday and 6 is Saturday.
     * Week starts with a Monday (1) by default
     */
    weekStartsOn: {
      type: Number,
      required: false,
      default: 1,
      validator: (e) => [0, 1, 2, 3, 4, 5, 6].includes(e)
    },
    /**
     * Disables datepicker and prevents it's opening
     */
    disabled: {
      type: Boolean,
      required: false,
      default: false
    },
    /**
     * Clears selected date
     */
    clearable: {
      type: Boolean,
      required: false,
      default: false
    },
    /*
     * Allows user to input date manually
     */
    typeable: {
      type: Boolean,
      required: false,
      default: false
    },
    /**
     * If set, lower-level views won't show
     */
    minimumView: {
      type: String,
      required: false,
      default: "day",
      validate: (e) => typeof e == "string" && W.includes(e)
    }
  },
  emits: {
    "update:modelValue": (e) => e == null || isValid(e),
    decadePageChanged: (e) => true,
    yearPageChanged: (e) => true,
    monthPageChanged: (e) => true,
    opened: () => true,
    closed: () => true
  },
  setup(e, { emit: t, attrs: r }) {
    const l = ref("none"), o = ref(e.startingViewDate), p = ref(null), n = ref(false), a = ref("");
    watchEffect(() => {
      const s = parse(a.value, e.inputFormat, /* @__PURE__ */ new Date(), {
        locale: e.locale
      });
      isValid(s) && (o.value = s);
    }), watchEffect(
      () => a.value = e.modelValue && isValid(e.modelValue) ? format(e.modelValue, e.inputFormat, {
        locale: e.locale
      }) : ""
    );
    const f = (s = "none") => {
      e.disabled || (s !== "none" && l.value === "none" && (o.value = e.modelValue || gt(e.lowerLimit, e.upperLimit, o.value)), l.value = s, t(s !== "none" ? "opened" : "closed"));
    };
    watchEffect(() => {
      e.disabled && (l.value = "none");
    });
    const _ = (s, V) => {
      o.value = V, s === "year" ? t("decadePageChanged", V) : s === "month" ? t("yearPageChanged", V) : s === "day" && t("monthPageChanged", V);
    }, d = (s) => {
      o.value = s, e.minimumView === "year" ? (f("none"), t("update:modelValue", s)) : l.value = "month";
    }, b = (s) => {
      o.value = s, e.minimumView === "month" ? (f("none"), t("update:modelValue", s)) : l.value = "day";
    }, y = (s) => {
      o.value = s, e.minimumView === "day" ? (f("none"), t("update:modelValue", s)) : l.value = "time";
    }, i = (s) => {
      f("none"), t("update:modelValue", s);
    }, D = () => {
      e.clearable && (f("none"), t("update:modelValue", null), o.value = e.startingViewDate);
    }, g = () => n.value = true, v = () => f(E.value), c = () => {
      n.value = false, f();
    }, k = (s) => {
      const V = s.keyCode ? s.keyCode : s.which;
      if ([
        27,
        // escape
        13
        // enter
      ].includes(V) && p.value.blur(), e.typeable) {
        const Q = parse(
          p.value.value,
          e.inputFormat,
          /* @__PURE__ */ new Date(),
          { locale: e.locale }
        );
        isValid(Q) && a.value === format(Q, e.inputFormat, { locale: e.locale }) && (a.value = p.value.value, t("update:modelValue", Q));
      }
    }, E = computed(() => {
      const s = W.indexOf(e.startingView), V = W.indexOf(e.minimumView);
      return s < V ? e.minimumView : e.startingView;
    });
    return {
      blur: c,
      focus: v,
      click: g,
      input: a,
      inputRef: p,
      pageDate: o,
      renderView: f,
      updatePageDate: _,
      selectYear: d,
      selectMonth: b,
      selectDay: y,
      selectTime: i,
      keyUp: k,
      viewShown: l,
      goBackFromTimepicker: () => e.startingView === "time" && e.minimumView === "time" ? null : l.value = "day",
      clearModelValue: D,
      initialView: E,
      log: (s) => console.log(s),
      variables: (s) => Object.fromEntries(
        Object.entries(s ?? {}).filter(([V, fe]) => V.startsWith("--"))
      )
    };
  }
});
var yt = { class: "v3dp__input_wrapper" };
var bt = ["readonly", "placeholder", "disabled", "tabindex"];
var ht = { class: "v3dp__clearable" };
function Dt(e, t, r, l, o, p) {
  const n = resolveComponent("year-picker"), a = resolveComponent("month-picker"), f = resolveComponent("day-picker"), _ = resolveComponent("time-picker");
  return openBlock(), createElementBlock("div", {
    class: "v3dp__datepicker",
    style: normalizeStyle(e.variables(e.$attrs.style))
  }, [
    createBaseVNode("div", yt, [
      withDirectives(createBaseVNode("input", mergeProps({
        type: "text",
        ref: "inputRef",
        readonly: !e.typeable,
        "onUpdate:modelValue": t[0] || (t[0] = (d) => e.input = d)
      }, e.$attrs, {
        placeholder: e.placeholder,
        disabled: e.disabled,
        tabindex: e.disabled ? -1 : 0,
        onKeyup: t[1] || (t[1] = (...d) => e.keyUp && e.keyUp(...d)),
        onBlur: t[2] || (t[2] = (...d) => e.blur && e.blur(...d)),
        onFocus: t[3] || (t[3] = (...d) => e.focus && e.focus(...d)),
        onClick: t[4] || (t[4] = (...d) => e.click && e.click(...d))
      }), null, 16, bt), [
        [vModelText, e.input]
      ]),
      withDirectives(createBaseVNode("div", ht, [
        renderSlot(e.$slots, "clear", { onClear: e.clearModelValue }, () => [
          createBaseVNode("i", {
            onClick: t[5] || (t[5] = (d) => e.clearModelValue())
          }, "x")
        ])
      ], 512), [
        [vShow, e.clearable && e.modelValue]
      ])
    ]),
    withDirectives(createVNode(n, {
      pageDate: e.pageDate,
      "onUpdate:pageDate": t[6] || (t[6] = (d) => e.updatePageDate("year", d)),
      selected: e.modelValue,
      lowerLimit: e.lowerLimit,
      upperLimit: e.upperLimit,
      onSelect: e.selectYear
    }, null, 8, ["pageDate", "selected", "lowerLimit", "upperLimit", "onSelect"]), [
      [vShow, e.viewShown === "year"]
    ]),
    withDirectives(createVNode(a, {
      pageDate: e.pageDate,
      "onUpdate:pageDate": t[7] || (t[7] = (d) => e.updatePageDate("month", d)),
      selected: e.modelValue,
      onSelect: e.selectMonth,
      lowerLimit: e.lowerLimit,
      upperLimit: e.upperLimit,
      format: e.monthListFormat,
      locale: e.locale,
      onBack: t[8] || (t[8] = (d) => e.viewShown = "year")
    }, null, 8, ["pageDate", "selected", "onSelect", "lowerLimit", "upperLimit", "format", "locale"]), [
      [vShow, e.viewShown === "month"]
    ]),
    withDirectives(createVNode(f, {
      pageDate: e.pageDate,
      "onUpdate:pageDate": t[9] || (t[9] = (d) => e.updatePageDate("day", d)),
      selected: e.modelValue,
      weekStartsOn: e.weekStartsOn,
      lowerLimit: e.lowerLimit,
      upperLimit: e.upperLimit,
      headingFormat: e.dayPickerHeadingFormat,
      disabledDates: e.disabledDates,
      locale: e.locale,
      weekdayFormat: e.weekdayFormat,
      "allow-outside-interval": e.allowOutsideInterval,
      format: e.dayFormat,
      onSelect: e.selectDay,
      onBack: t[10] || (t[10] = (d) => e.viewShown = "month")
    }, null, 8, ["pageDate", "selected", "weekStartsOn", "lowerLimit", "upperLimit", "headingFormat", "disabledDates", "locale", "weekdayFormat", "allow-outside-interval", "format", "onSelect"]), [
      [vShow, e.viewShown === "day"]
    ]),
    withDirectives(createVNode(_, {
      pageDate: e.pageDate,
      visible: e.viewShown === "time",
      selected: e.modelValue,
      disabledTime: e.disabledTime,
      onSelect: e.selectTime,
      onBack: e.goBackFromTimepicker
    }, null, 8, ["pageDate", "visible", "selected", "disabledTime", "onSelect", "onBack"]), [
      [vShow, e.viewShown === "time"]
    ])
  ], 4);
}
var Lt = T(vt, [["render", Dt]]);
export {
  Lt as default
};
//# sourceMappingURL=vue3-datepicker.js.map
